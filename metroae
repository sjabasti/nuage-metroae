#!/usr/bin/env bash
set -e

METROAE_VERSION="v4.1.0"
MENU=()

#################################################################################
#                             CONTAINER COMMANDS                                #
#################################################################################

MENU+=(',container'                 'Manage the MetroAE container'                         'container'  ''                       '')
MENU+=(',container,pull'            'Pull a new MetroAE image from the registry'           'container'  'pull'                   ',container,pull')
MENU+=(',container,setup'           'Setup the MetroAE container'                          'container'  'setup'                  ',container,setup')
MENU+=(',container,start'           'Start the MetroAE container'                          'container'  'start'                  ',container,start')
MENU+=(',container,stop'            'Stop the MetroAE container'                           'container'  'stop'                   ',container,stop')
MENU+=(',container,status'          'Display the status of the MetroAE container'          'container'  'status'                 ',container,status')
MENU+=(',container,destroy'         'Destroy the MetroAE container'                        'container'  'destroy'                ',container,destroy')
MENU+=(',container,update'          'Update the MetroAE container to the latest version'   'container'  'upgrade-engine'         ',container,update')
MENU+=(',container,download'        'Download the container in tar format'                 'container'  'download'               ',container,download')

#################################################################################
#                                  VARIABLES                                    #
#################################################################################

# Switch
ANSIBLE_CONFIG_FILE="ansible.cfg"
CLI_ARGS=""

# Menu
MENU_STRIDE=5                                                          # Menu steps
MENU_KEY=""
SUB_MENU=""
MATCH_MENU=""
EXTRA_ARGS=()
PLAYBOOK_MENU="menu"

# Common
LINUX=0
NON_LINUX=1
CONTAINER_ID=''
RUNNING_CONTAINER_ID=''
IMAGE_ID=''
if [[ -z $MAX_CONTAINER_VERSION ]]; then
    MAX_CONTAINER_VERSION='current'
fi
REGISTRY_HOST='registry.mv.nuagenetworks.net'
METRO_AE_IMAGE="$REGISTRY_HOST:5000/metroae"
if [[ ! -z $IMAGE_NAME ]]; then
    METRO_AE_IMAGE="$REGISTRY_HOST:5000/$IMAGE_NAME"
fi
OS_RELEASE=$LINUX
PATH_ARG=""
ENVIRONMENT_FILTERS=(PWD PATH HOME USER SHELL MAIL SSH_CONNECTION LOGNAME OLDPWD LESSOPEN _ XDG_RUNTIME_DIR HISTCONTROL)
SCRIPT_VERSION=1.1.0

S3_KEY="AKIAJOPWRLAXPCUXZX3A"
S3_SECRET="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"
CONTAINER_TAR_FILE=metroaecontainer.tar
if [[ ! -z $IMAGE_NAME ]]; then
    CONTAINER_TAR_FILE="$IMAGE_NAME.tar"
fi
S3_BUCKET="nuage-devops"
S3_FOLDER="images"
S3_HEADER_DUMP_FILE=s3_headers.txt
TEMPORARY_DIRECTORY=/tmp
INSTALL_FOLDER=/opt/metroae
if [[ -z $SCRIPT_LOG_FILE ]]; then
    SCRIPT_LOG_FILE=/opt/metroae/metroae.log
fi

if [[ -z $SETUP_FILE ]]; then
    SETUP_FILE=/opt/metroae/.metroae
fi
TAB_COMPLETION_SCRIPT=tab-completion-metroae.sh
COMPLETION_DIR=/etc/bash_completion.d/

# Deployment variables
CURRENT_DIR=`pwd`
PLAYBOOK_DIR=$CURRENT_DIR/src/playbooks
PLAYBOOK_WITH_BUILD_DIR=$CURRENT_DIR/src/playbooks/with_build
ROLES_DIR=$CURRENT_DIR/src/roles
SCHEMA_DIR=$CURRENT_DIR/schemas
DEPLOYMENTS_BASE_DIR=$CURRENT_DIR/deployments
DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/default
INVENTORY_DIR=$CURRENT_DIR/src/inventory
PLUGIN_DIR=$CURRENT_DIR/src/metro_plugins
VAULT_ENV_FILE=$CURRENT_DIR/src/vault-env
ENCRYPTED_DEPLOYMENT_FILE=credentials.yml
ENCRYPTED_TOKEN=\$ANSIBLE_VAULT
AUDIT_LOG=audit.log
ORIGINAL_ARGS=""
SKIP_BUILD=0
SKIP_PASSWORD=0
POSITIONAL=()


#################################################################################
#                                   SWITCH                                      #
#################################################################################

function read_setup_files {
    while read -r line; do declare -g $line; done < $SETUP_FILE
}

function print_write_permission_warning {
    debug ${FUNCNAME[0]}
    echo ""
    echo "WARNING: This user does not have Write permissions for MetroAE log file: $SCRIPT_LOG_FILE"
    echo "Ensure that the MetroAE install directory $INSTALL_FOLDER and its contents belongs to"
    echo "group 'docker' and that group write permissions are set. Continuing..."
    echo ""
}

function debug {
    if [[ ! -z $METROAE_DEBUG ]]; then
        write_to_screen_and_script_log "  DEBUG: $1"
    fi
}

function write_to_script_log {
    if [[ -f $SCRIPT_LOG_FILE ]]; then
        if [ -w "$SCRIPT_LOG_FILE" ]; then
            echo "$(date): $1" >> $SCRIPT_LOG_FILE
        else
            if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                print_write_permission_warning
                METROAE_WRITE_WARNING_PRINTED=1
            fi
        fi
    fi
}

function write_to_screen_and_script_log {
    echo "$1"
    write_to_script_log "$1"
}

function check_run_mode {
    debug ${FUNCNAME[0]}
    if [[ -z $RUN_MODE ]]; then
        if [[ -f $ANSIBLE_CONFIG_FILE ]]; then
            RUN_MODE="REPO"
        else
            RUN_MODE="CONTAINER"
        fi
    fi
    write_to_script_log "RUN_MODE is $RUN_MODE"
}

function try_get_menu {
    debug ${FUNCNAME[0]}
    if [[ $RUN_MODE == "INSIDE" ]]; then
        if [[ -f /source/nuage-metro/src/$PLAYBOOK_MENU ]]; then
            source /source/nuage-metro/src/$PLAYBOOK_MENU
        fi
        if ls /source/nuage-metro/src/metro_plugins/* 1> /dev/null 2>&1; then
            for menu in /source/nuage-metro/src/metro_plugins/*/menu
            do
                source $menu
            done
        fi
    elif [[ $RUN_MODE == "REPO" ]]; then
        if [[ -f src/$PLAYBOOK_MENU ]]; then
            source src/$PLAYBOOK_MENU
        fi
        if ls src/metro_plugins/* 1> /dev/null 2>&1; then
            for menu in src/metro_plugins/*/menu
            do
                source $menu
            done
        fi
    elif [[ -f $SETUP_FILE ]]; then
        read_setup_files
        if [[ -f $METROAE_MOUNT_POINT/$PLAYBOOK_MENU ]]; then
            source $METROAE_MOUNT_POINT/$PLAYBOOK_MENU
        fi
        if ls $METROAE_MOUNT_POINT/metro_plugins/* 1> /dev/null 2>&1; then
            for menu in $METROAE_MOUNT_POINT/metro_plugins/*/menu
            do
                source $menu
            done
        fi
    fi
}

function check_for_prerequisite {
    debug ${FUNCNAME[0]}
    if [[ $RUN_MODE == "INSIDE" ]]; then
        if [[ ! -f /source/nuage-metro/src/$PLAYBOOK_MENU ]]; then
            write_to_screen_and_script_log "It looks like you are running MetroAE from inside the container, but we couldn't find the container's menu file in the data directory. Please run 'metroae container setup' and try again."
            exit 1
        fi
    else
        get_container_id
        get_running_container_id
        if [[ $RUN_MODE == "REPO" ]]; then
            if [[ ! -f src/$PLAYBOOK_MENU ]]; then
                write_to_screen_and_script_log "It looks like you are trying to run using a clone of MetroAE, but we couldn't find the menu file in the workspace. Please update your workspace and try again."
                exit 1
            fi
        # RUN_MODE is CONTAINER
        elif [[ -f $SETUP_FILE ]]; then
            read_setup_files
            if [[ -z $RUNNING_CONTAINER_ID ]] && [[ ! -z $CONTAINER_ID ]]; then
                echo ""
                write_to_screen_and_script_log ">>> Starting the stopped container"
                echo ""
                docker start $CONTAINER_ID
            fi
            if [[ ! -f $METROAE_MOUNT_POINT/$PLAYBOOK_MENU ]]; then
                write_to_screen_and_script_log "It looks like you are trying to run the MetroAE container, but we couldn't find the container's menu file in the data directory. Please run ‘metroae container setup’ and try again."
                exit 1
            fi
        else
            if [[ ! -z $RUNNING_CONTAINER_ID ]]; then
                write_to_screen_and_script_log "It looks like the MetroAE container is running, but we couldn't find the container's setup file. Please run ‘metroae container setup’ and try again."
                exit 1
            else
                declare -l confirmation
                if [[ -z $1 ]]; then
                    echo ""
                    write_to_screen_and_script_log "It looks like you are trying to run the MetroAE container, but the MetroAE container has not been setup."
                    confirmation="init"
                    while [[ $confirmation != "n" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "" ]]
                    do
                        echo ""
                        read -p "Do you want to setup the MetroAE container (y/N): " confirmation
                    done
                else
                    confirmation=$1
                fi

                if [[ $confirmation == "y" ]]; then
                    check_for_user_group "$@"
                    setup_container
                else
                    echo ""
                    write_to_screen_and_script_log "Setup of MetroAE container canceled. Quitting."
                    exit 0
                fi
            fi
        fi
    fi
}

function print_version_and_exit {
    debug ${FUNCNAME[0]}
    if [[ $1 == 0 ]]; then
        echo ""
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            get_max_container_version
            write_to_screen_and_script_log "[MetroAE $METROAE_VERSION, script $SCRIPT_VERSION, container $MAX_CONTAINER_VERSION]"
        elif [[ $RUN_MODE == "REPO" ]]; then
            if [[ ! ${MATCH_MENU[0]} =~ ",container*" ]] && [[ ! ${MATCH_MENU[0]} =~ ",config*" ]] && [[ ! ${MATCH_MENU[0]} =~ ",gui*" ]]; then
                write_to_screen_and_script_log "[MetroAE $METROAE_VERSION, script $SCRIPT_VERSION]"
            fi
        fi
    fi
    exit $1
}

#################################################################################
#                                   COMMON                                      #
#################################################################################

function check_docker {
    debug ${FUNCNAME[0]}
    set +e

    echo ""
    write_to_script_log ">>> Checking docker version"
    if [[ -f $SCRIPT_LOG_FILE ]]; then
        if [ -w "$SCRIPT_LOG_FILE" ]; then
            docker --version >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE
        else
            if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                print_write_permission_warning
                METROAE_WRITE_WARNING_PRINTED=1
            fi
        fi
    else
        docker --version >> /dev/null 2>> /dev/null
    fi

    if [[ $? -ne 0 ]]; then
        write_to_screen_and_script_log "Docker engine must be installed in order to run MetroAE. Quitting. Please install Docker and try again. See https://docs.docker.com for details"
        print_version_and_exit 1
    fi
    set -e
}

function get_host_operating_system {
    debug ${FUNCNAME[0]}
    set +e
    stat /etc/os-release >> /dev/null 2>> /dev/null
    if [ $? -ne 0 ]
    then
        OS_RELEASE=$NON_LINUX
    fi
    debug "${FUNCNAME[0]}: OS_RELEASE: $OS_RELEASE"
    set -e
}

function get_max_container_version {
    debug ${FUNCNAME[0]}
    if [[ ! -z $IMAGE_TAG ]]; then
        MAX_CONTAINER_VERSION=$IMAGE_TAG
    else
        versions=`docker images 2>/dev/null | grep $METRO_AE_IMAGE | awk '{ print $2}'`
        debug "versions = $versions"
        MAX_CONTAINER_VERSION=''
        for version in $versions
        do
            if [[ $version != "<none>" ]]; then
                debug "version = $version"
                if [[ -z $MAX_CONTAINER_VERSION ]]; then
                        MAX_CONTAINER_VERSION=$version
                fi

                if [[ $MAX_CONTAINER_VERSION < $version ]]; then
                        MAX_CONTAINER_VERSION=$version
                fi
            fi
            debug "MAX_CONTAINER_VERSION = $MAX_CONTAINER_VERSION"
        done

        if [[ -z $MAX_CONTAINER_VERSION ]]; then
            MAX_CONTAINER_VERSION='current'
        fi
    fi
    debug "Newest MetroAE container version found is $MAX_CONTAINER_VERSION"
    write_to_script_log "Newest MetroAE container version found is $MAX_CONTAINER_VERSION"
}

function get_container_id {
    debug ${FUNCNAME[0]}
    get_max_container_version
    CONTAINER_ID=`docker ps -a 2>/dev/null | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $1}'`
    write_to_script_log "CONTAINER_ID: $CONTAINER_ID"
}

function get_running_container_id {
    debug ${FUNCNAME[0]}
    get_max_container_version
    RUNNING_CONTAINER_ID=`docker ps 2>/dev/null | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $1}'`
    write_to_script_log "RUNNING_CONTAINER_ID: $RUNNING_CONTAINER_ID"
}

function get_image_id {
    debug ${FUNCNAME[0]}
    get_max_container_version
    IMAGE_ID=`docker images 2>/dev/null | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $3}'`
    write_to_script_log "${FUNCNAME[0]}: IMAGE_ID: $IMAGE_ID"
}


function stop_running_container {
    debug ${FUNCNAME[0]}
    echo ""
    write_to_screen_and_script_log ">>> Stopping the MetroAE container"
    echo ""
    get_running_container_id

    if [[ -z $RUNNING_CONTAINER_ID  ]]; then
        write_to_screen_and_script_log "The MetroAE container is not running. Nothing to do."
        return 0
    fi

    set +e
    docker stop $RUNNING_CONTAINER_ID
    status=$?
    if [[ $status -ne 0 ]]; then
        write_to_screen_and_script_log "Attempt to stop MetroAE container failed"
    else
        write_to_screen_and_script_log "The MetroAE container was stopped"
    fi
    set -e

    return $status
}

function delete_container_id {
    debug ${FUNCNAME[0]}
    echo ""
    write_to_screen_and_script_log ">>> Deleting the MetroAE container"
    echo ""
    get_container_id
    if [[ -z $CONTAINER_ID ]]; then
        write_to_screen_and_script_log "MetroAE container not found. Nothing to do."
        return 0
    fi

    write_to_script_log "Execute 'docker rm' on the MetroAE container with id $CONTAINER_ID"

    set +e
    if [[ -f $SCRIPT_LOG_FILE ]]; then
        if [ -w "$SCRIPT_LOG_FILE" ]; then
            docker rm -v $CONTAINER_ID | tee -a $SCRIPT_LOG_FILE
        else
            if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                print_write_permission_warning
                METROAE_WRITE_WARNING_PRINTED=1
            fi
            docker rm -v $CONTAINER_ID
        fi
    else
        docker rm -v $CONTAINER_ID
    fi

    if [[ $? -ne 0 ]]; then
        write_to_screen_and_script_log "Attempt to execute 'docker rm' on the MetroAE container failed"
        return 1
    fi
    set -e

    write_to_screen_and_script_log "Execute of 'docker rm' on the MetroAE container was successful"
}

function destroy {
    debug ${FUNCNAME[0]}
    declare -l confirmation
    if [[ -z $1 ]]; then
        confirmation="init"
        echo ""
        write_to_screen_and_script_log "It looks like you are about to destroy the MetroAE container."
        echo "If you continue, the MetroAE container will be stopped, the MetroAE container image will be"
        echo "removed from Docker, and your data on disk will be preserved. Your data will"
        echo "not be destroyed. You will be able to use it again by pulling another MetroAE"
        echo "container and running 'metroae container setup'."
        while [[ $confirmation != "n" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "" ]]
        do
            echo ""
            read -p "Do you really want to destroy the MetroAE container? (y/N): " confirmation
        done
    else
        confirmation=$1
    fi

    if [[ $confirmation != "y" ]]; then
        echo ""
        write_to_screen_and_script_log "Destroy of metroae container was canceled"
        echo ""
        print_version_and_exit 0
    fi

    set +e
    stop_running_container
    if [[ $? -ne 0 ]]; then
        return 1
    fi

    delete_container_id
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e

    echo ""
    write_to_screen_and_script_log ">>> Removing MetroAE image"
    echo ""

    get_image_id
    if [[ -z $IMAGE_ID ]]; then
        write_to_screen_and_script_log "MetroAE container image not found. Nothing to do."
        return 0
    fi

    set +e
    docker rmi -f $IMAGE_ID

    if [[ $? -ne 0 ]]; then
        echo ""
        write_to_screen_and_script_log "Attempt to remove the MetroAE image failed"
        echo ""
        return 1
    fi
    set -e

    echo ""
    write_to_screen_and_script_log "The MetroAE container image was removed"
    echo ""
    return 0
}

function get_from_s3 {
    debug ${FUNCNAME[0]}
    headers=$TEMPORARY_DIRECTORY/$S3_HEADER_DUMP_FILE
    tarfile=$TEMPORARY_DIRECTORY/$CONTAINER_TAR_FILE
    if [[ ! -z $1 ]]; then
      tarfile=$1
    fi
    set +e
    rm $tarfile > /dev/null 2>&1
    rm $headers > /dev/null 2>&1
    set -e
    touch $headers
    date=$(date +"%a, %d %b %Y %T %z")
    content_type='application/x-compressed-tar'
    string="GET\n\n$content_type\n$date\n/$S3_BUCKET/$S3_FOLDER/$CONTAINER_TAR_FILE"
    signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3_SECRET}" -binary | base64)
    CURL_COMMAND=$(cat <<-END
        curl -X GET \
            -D $headers \
            -H "Host: $S3_BUCKET.s3.amazonaws.com" \
            -H "Date: $date" \
            -H "Content-Type: $content_type" \
            -H "Authorization: AWS ${S3_KEY}:$signature" \
            "https://$S3_BUCKET.s3.amazonaws.com/$S3_FOLDER/$CONTAINER_TAR_FILE" > $tarfile
	END
    )
    debug "${FUNCNAME[0]}: CURL_COMMAND: $CURL_COMMAND"
    if [[ -f $SCRIPT_LOG_FILE ]]; then
        if [ -w "$SCRIPT_LOG_FILE" ]; then
            eval $CURL_COMMAND | tee -a $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE
        else
            if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                print_write_permission_warning
                METROAE_WRITE_WARNING_PRINTED=1
            fi
            eval $CURL_COMMAND
        fi
    else
        eval $CURL_COMMAND
    fi
    if [[ $? -ne 0 ]]; then
        echo ""
        write_to_screen_and_script_log "Command to pull the MetroAE container image from S3 failed. Quitting"
        print_version_and_exit 1
    fi
    status=$(cat $headers | head -n 1 | awk '{print $2}')
    debug "${FUNCNAME[0]}: status = $status"
    if [[ $status -ne 200 ]]; then
        echo ""
        write_to_screen_and_script_log "Attempt to pull the MetroAE container image from S3 failed. Quitting"
        print_version_and_exit 1
    fi

    write_to_screen_and_script_log "Successfully downloaded the container to $tarfile"

    set +e
    rm $headers > /dev/null 2>&1
    set -e
}

function pull {
    debug ${FUNCNAME[0]}
    if [[ ! -z $1 ]]; then
        MAX_CONTAINER_VERSION=$1
    fi
    debug "${FUNCNAME[0]}: MAX_CONTAINER_VERSION: $MAX_CONTAINER_VERSION"

    repo="Docker registry"
    set +e
    if [[ -f $SCRIPT_LOG_FILE ]]; then
        if [ -w "$SCRIPT_LOG_FILE" ]; then
            debug "${FUNCNAME[0]}: Script log writable"
            ping -c 5 $REGISTRY_HOST >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE
        else
            if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                print_write_permission_warning
                METROAE_WRITE_WARNING_PRINTED=1
            fi
            debug "${FUNCNAME[0]}: Script log not writable"
            ping -c 5 $REGISTRY_HOST > /dev/null 2>&1
        fi
    else
        debug "${FUNCNAME[0]}: No script log"
        ping -c 5 $REGISTRY_HOST > /dev/null 2>&1
    fi

    ping_rc=$?
    debug "${FUNCNAME[0]}: ping_rc: $ping_rc"
    set -e

    if [[ $ping_rc -ne 0 || ( ! -z $1 && "$1" = "S3" ) ]]; then
        echo ""
        write_to_screen_and_script_log "Could not connect to the Nokia registry to download the MetroAE container image"
        write_to_screen_and_script_log "Retrieving the MetroAE container image from Amazon S3 instead"
        get_from_s3

        docker load -i $TEMPORARY_DIRECTORY/$CONTAINER_TAR_FILE
        repo="Amazon S3"

        set +e
        rm $TEMPORARY_DIRECTORY/$CONTAINER_TAR_FILE > /dev/null 2>&1
        set -e

    else
        echo ""
        write_to_screen_and_script_log ">>> Pulling the MetroAE container image from Nokia registry"
        echo ""
        if [[ -f $SCRIPT_LOG_FILE ]]; then
            if [ -w "$SCRIPT_LOG_FILE" ]; then
                debug "Script log is writable"
                sudo docker pull $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION | tee -a $SCRIPT_LOG_FILE
            else
                if [ -z $METROAE_WRITE_WARNING_PRINTED ]; then
                    print_write_permission_warning
                    METROAE_WRITE_WARNING_PRINTED=1
                fi
                debug "Script log is not writable"
                sudo docker pull $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION
            fi
        else
            debug "Script log is not found"
            sudo docker pull $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION
        fi
    fi

    status=$?
    if [[ $status -ne 0 ]]; then
        write_to_screen_and_script_log "Attempt to pull the $MAX_CONTAINER_VERSION MetroAE container image failed. Quitting."
    else
        write_to_screen_and_script_log "Successfully pulled the MetroAE container image from $repo"
    fi
    set -e

    return $status
}

function run_container {
    debug ${FUNCNAME[0]}

    get_image_id

    if [[ -z $IMAGE_ID ]];  then
        set +e
        write_to_screen_and_script_log "We didn't find the MetroAE container image. We are pulling a new container from the repo."
        pull
        status=$?
        set -e
        if [ $status -ne 0 ]
        then
            write_to_screen_and_script_log "Attempt to pull the MetroAE container failed. Quitting."
            return $status
        fi
    else
        get_container_id

        set +e
        echo ""
        write_to_screen_and_script_log ">>> Starting the MetroAE container"
        echo ""
        if [[ -z $CONTAINER_ID ]]; then
            read_setup_files
            network_args=""
            get_host_operating_system
            if [[ $OS_RELEASE  -eq $LINUX ]]; then
                network_args="--network host"
            else
                network_args="-p $UI_PORT:5001"
            fi

            mount_args="-v $METROAE_MOUNT_POINT:/metroae_data:Z"

            if [[ ! -z $IMAGES_MOUNT_POINT ]]; then
                mount_args="$mount_args -v $IMAGES_MOUNT_POINT:/images:Z"
            fi

            if [[ $METROAE_SETUP_TYPE == "c" ]]; then
                levi_args="-e LEVISTATE_CONTAINER=1"
            else
                levi_args=""
            fi

            user_name=`id -u $(whoami)`
            group_name=`id -g $(whoami)`

            DOCKER_COMMAND=$(cat <<-END
                docker run \
                    -e RUN_MODE="INSIDE" \
                    -e USER_NAME=$user_name \
                    -e GROUP_NAME=$group_name \
                    $levi_args \
                    -t -d \
                    $network_args \
                    $mount_args \
                    --name metroae $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION
		END
            )
            debug "${FUNCNAME[0]}: DOCKER_COMMAND: $DOCKER_COMMAND"
            eval $DOCKER_COMMAND
        else
            debug "${FUNCNAME[0]}: docker start $CONTAINER_ID"
            docker start $CONTAINER_ID
        fi

        status=$?
        if [[ $status -ne 0 ]]; then
            echo ""
            write_to_screen_and_script_log "Attempt to run the MetroAE container failed. Quitting."
        else
            echo ""
            write_to_screen_and_script_log "MetroAE container started successfully"
        fi
        set -e
        return $status
    fi

    return 0
}

function setup_container {
    debug ${FUNCNAME[0]}
    local is_ui_run=false
    get_host_operating_system

    if [[ ! -d $INSTALL_FOLDER ]]; then
        sudo mkdir -p $INSTALL_FOLDER
    fi
    sudo chown -R root:docker $INSTALL_FOLDER
    sudo chmod -R 775 $INSTALL_FOLDER
    if [[ ! -f $SETUP_FILE ]]; then
        sudo touch $SETUP_FILE
        if [[ $OS_RELEASE -eq $NON_LINUX ]]; then
            debug "sudo chmod 777 $SETUP_FILE"
            sudo chmod 777 $SETUP_FILE
        else
            debug "sudo chmod 0774 $SETUP_FILE"
            sudo chmod 0774 $SETUP_FILE
        fi
    fi
    sudo chown root:docker $SETUP_FILE
    if [[ ! -f $SCRIPT_LOG_FILE ]]; then
        sudo touch $SCRIPT_LOG_FILE
        if [[ $OS_RELEASE -eq $NON_LINUX ]]; then
            sudo chmod 777 $SCRIPT_LOG_FILE
        else
            sudo chmod 0774 $SCRIPT_LOG_FILE
        fi
    fi
    sudo chown root:docker $SCRIPT_LOG_FILE

    get_container_id
    get_running_container_id

    if [[ ! -z $CONTAINER_ID ]] || [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        echo ""
        write_to_screen_and_script_log "It looks like the MetroAE container is already setup."
        echo "If you want to update to the latest MetroAE container version, please quit setup"
        echo "and then run 'metroae container update' to get the latest container while keeping"
        echo "your current setup and data. Your data on disk will be preserved."
        echo ""
        echo "If you want to run setup, the existing MetroAE container will not be replaced."
        echo "We will stop the MetroAE container, reconfigure it according to your inputs,"
        echo "and restart the existing MetroAE container with the new configuration."
        echo ""
        echo "Note that if you want to re-use your existing deployments on disk after"
        echo "running setup, you must either specify the same directories when prompted"
        echo "for input or you must manually copy the files from the existing data locations"
        echo "on disk to the new locations."
        echo ""

        declare -l continue_confirm
        if [[ -z $1 ]]; then
            continue_confirm="init"
            while [[ $continue_confirm != "y" ]] && [[ $continue_confirm != "n" ]] && [[ $continue_confirm != "" ]]
            do
                read -p "Do you want to continue with setup? (y/N): " continue_confirm
            done
        else
            continue_confirm=$1
            shift
        fi

        if [[ $continue_confirm != "y" ]] ; then
            echo ""
            write_to_screen_and_script_log ">>> Setup canceled"
            echo ""
            return 0
        fi
    fi

    write_to_screen_and_script_log ">>> Setup MetroAE container"

    set +e

    get_image_id

    if [[ -z $IMAGE_ID ]]; then
        echo ""
        write_to_screen_and_script_log ">>> Pulling the MetroAE container image from the repository"
        pull
    fi

    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e

    if [[ ! -z "$METROAE_CONFIG_ENABLE" ]]; then

        declare -l setup_type
        setup_type="init"
        if [[ -z $1 ]]; then
            while [[ $setup_type != "c" ]] && [[ $setup_type != "d" ]] && [[ $setup_type != "b" ]] && [[ $setup_type != "" ]]
            do
                echo ""
                write_to_screen_and_script_log "Setup can configure the container to support MetroAE (c)onfig, MetroAE (d)eploy,"
                echo "or (b)oth MetroAE config and deploy. MetroAE config is used for day-zero VSD"
                echo "configuration tasks. MetroAE deploy is used for installing, upgrading, and"
                echo "health checking of Nuage VSP components in your environment."
                echo ""
                read -p "Do you want to setup MetroAE config, deploy, or both? (c/d/B): " setup_type
            done
        else
            echo ""
            write_to_screen_and_script_log ">>> Setting setup type to passed in parameter $1"
            setup_type=$1
            shift
        fi

        if [[ $setup_type == "c" ]]; then
            echo ""
            write_to_screen_and_script_log ">>> Setup container for MetroAE config"
        elif [[ $setup_type == "d" ]]; then
            echo ""
            write_to_screen_and_script_log ">>> Setup container for MetroAE deploy"
        else
            echo ""
            write_to_screen_and_script_log ">>> Setup container for both MetroAE config and deploy"
            setup_type="b"
        fi

    else
        setup_type="d"
    fi

    if [ -w "$SETUP_FILE" ]; then
        sed -i '/^METROAE_SETUP_TYPE/d' $SETUP_FILE
        echo "METROAE_SETUP_TYPE=$setup_type" >> $SETUP_FILE
        write_to_script_log "METROAE_SETUP_TYPE=$setup_type"
    else
        echo ""
        write_to_screen_and_script_log "We couldn't write to the MetroAE setup file ($SETUP_FILE). Please ensure"
        write_to_screen_and_script_log "that the file has user:group ownership set to 'root:docker' and try again."
        write_to_screen_and_script_log "You can also delete the file and re-run 'metroae container setup"
    fi

    if [[ -z $1 ]]; then
        echo ""
        write_to_screen_and_script_log "Data directory configuration"
        echo ""
        echo "The MetroAE container needs access to your user data. It gets access by internally"
        echo "mounting a directory from the host. We refer to this as the 'data directory'."
        echo "The data directory is where you will have deployments, templates, documentation,"
        echo "and other useful files."
        echo ""
        echo "Please specify the full path to the data directory on the Docker host. Setup will"
        echo "make sure that the path ends with 'metroae_data'. If the path you specify does"
        echo "not end with 'metroae_data', setup will create it."
        get_user_path_input "Data directory path" metroae_data
    else
        echo ""
        valid_path=1
        PATH_ARG=$1
        check_user_path PATH_ARG metroae_data
        if [[ $valid_path -ne 0 ]]; then
            exit 1
        fi
        write_to_screen_and_script_log ">>> Setting data path to passed in parameter $PATH_ARG"
        shift
    fi

    data_path=$PATH_ARG

    write_to_script_log "METROAE_MOUNT_POINT=$data_path"
    sed -i '/^METROAE_MOUNT_POINT/d' $SETUP_FILE
    echo METROAE_MOUNT_POINT=$data_path >> $SETUP_FILE

    # stop and remove existing container if any
    get_running_container_id
    if [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        stop_running_container
    fi

    get_container_id
    if [[ ! -z $CONTAINER_ID ]]; then
        delete_container_id
    fi

    write_to_screen_and_script_log ">>> Prepare data directory for updates from new container."
    echo ""
    rm -rf $METROAE_MOUNT_POINT/version >> /dev/null 2>> /dev/null

    run_container

    setup_tab_completion

    config_status=0
    if [[ $setup_type != "d" ]]; then
        echo ""
        write_to_screen_and_script_log ">>> Pulling the latest templates and files for MetroAE config in the container"
        echo ""
        docker_exec_levistate templates update
        config_status=$?
    fi

    if [[ $config_status -ne 0 ]]; then
        echo ""
        write_to_screen_and_script_log "Problem setting up MetroAE config in the container. Return code: $config_status. Quitting."
        echo ""
        return 1
    fi

    echo ""
    write_to_screen_and_script_log "MetroAE container setup complete. Execute 'metroae container status' for status."
    echo ""
    return 0
}

function check_user_path {
    debug ${FUNCNAME[0]}

    set +e
    if [[ -w $SCRIPT_LOG_FILE ]]; then
        stat $PATH_ARG >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE
    else
        stat $PATH_ARG
    fi

    valid_path=$?
    if [[ $valid_path -ne 0 ]]; then
        write_to_screen_and_script_log "We had a problem validating the path you entered: $PATH_ARG. Please try again."
    fi

    # check to see if the path ends with passed in directory
    if [[ "$PATH_ARG" != *"$2" ]]; then
        PATH_ARG=${PATH_ARG%/}/$2
        mkdir -p $PATH_ARG
    fi
    set -e
}


function get_user_path_input {
    debug ${FUNCNAME[0]}
    PATH_ARG=""
    valid_path=1
    set +e

    while [[ $valid_path -ne 0 ]]
    do
        echo ""
        read -p "$1: " PATH_ARG
        echo ""
        write_to_screen_and_script_log "Checking path: $1"
        check_user_path PATH_ARG $2
    done

    echo ""
    write_to_screen_and_script_log "$1 set to: $PATH_ARG"
    echo ""
    set -e
}

function update_container {
    debug ${FUNCNAME[0]}
    declare -l confirmation
    if [[ -z $2 ]]; then
        confirmation="init"
        echo ""
        write_to_screen_and_script_log "You are about to update your MetroAE container to the latest version."
        echo "We will destroy the existing container, pull the latest version of the container, and start the container"
        echo "using the existing configuration. Your data on disk will be preserved."
        while [[ $confirmation != "n" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "" ]]
        do
            echo ""
            read -p "Do you really want to update the MetroAE container? (y/N): " confirmation
        done
    else
        confirmation=$2
    fi

    if [[ $confirmation != "y" ]]; then
        echo ""
        write_to_screen_and_script_log "Update of metroae container was canceled"
        echo ""
        print_version_and_exit 0
    fi

    set +e
    destroy y
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e
    if [[ ! -z $1 ]]; then
        pull $1
    else
        pull
    fi
    run_container

    read_setup_files
    for plugin_name in `ls $METROAE_MOUNT_POINT/metro_plugins/`; do
        if [ -d "$METROAE_MOUNT_POINT/metro_plugins/${plugin_name}" ]; then
            docker_metro_ae_exec plugin install "/metroae_data/metro_plugins/${plugin_name}"
        fi
    done
}

function check_if_mount_point_configured {
    debug ${FUNCNAME[0]}
    if [[ -z "$METROAE_MOUNT_POINT" ]]; then
        echo ""
        write_to_screen_and_script_log "We couldn't find the data directory configuration for the container in the configuration file."
        echo "Please run 'metroae container setup' to correct this and try again."
        echo ""
        return 1
    fi
}

function setup_tab_completion {
    debug ${FUNCNAME[0]}
    echo ""
    write_to_screen_and_script_log ">>> Checking to see if we can setup tab completion for your metroae script."
    echo ""

    if [[ -f $SETUP_FILE ]]; then
        read_setup_files
    fi

   check_if_mount_point_configured

    echo ""
    write_to_screen_and_script_log ">>> Configure optional metroae script tab completion on your host"
    echo ""

    if [[ ! -d $COMPLETION_DIR ]]; then
        write_to_script_log "Creating tab-completion dir: $COMPLETION_DIR"
        set +e
        mkdir $COMPLETION_DIR
        if [[ $? -ne 0 ]]; then
            write_to_screen_and_script_log "We encountered an error creating the tab-completion directory on your host."
            echo "We will not be configuring optional metroae script tab completion."
            echo "You may continue to use the metroae script without tab completion."
            echo ""
            set -e
            return 1
        fi
        set -e
    fi

    write_to_script_log "Copying tab-completion to standard dir: $METROAE_MOUNT_POINT/$TAB_COMPLETION_SCRIPT to $COMPLETION_DIR"
    set +e
    sudo cp $METROAE_MOUNT_POINT/$TAB_COMPLETION_SCRIPT $COMPLETION_DIR
    if [[ $? -ne 0 ]]; then
        write_to_screen_and_script_log "We encountered an error copying files to the tab-completion directory on your host."
        echo "We will not be configuring optional metroae script tab completion."
        echo "You may continue to use the metroae script without tab completion."
        echo ""
        set -e
        return 1
    fi
    set -e
    write_to_screen_and_script_log "Successfully configured optional metroae script tab completion."
    echo ""
}

function run_container_if_not_running {
    debug ${FUNCNAME[0]}
    get_running_container_id

    if [[ -z $RUNNING_CONTAINER_ID ]]; then
        run_container
        get_running_container_id
    fi
}

function docker_exec {
    debug ${FUNCNAME[0]}
    run_container_if_not_running
    environment=""
    working_dir=""

    if [[ $1 == "env" ]]; then
        shift
        environment='-e ANSIBLE_FORCE_COLOR=true'
        for env in `env`
        do
            filtered=0
            for filter in ${ENVIRONMENT_FILTERS[@]}
            do
                if [[ "$env" =~ ^$filter ]]
                then
                    filtered=1
                fi
            done

        if [[ $filtered -eq 0 ]]; then
            environment="$environment -e $env"
        fi
        done

        if [[ ! -z $USER_DATA_PATH ]]; then
            environment="$environment -e USER_DATA_PATH=$USER_DATA_PATH"
        fi
    fi

    if [[ $1 == "workdir" ]]; then
        working_dir="-w $2"
        shift
        shift
    fi
    docker exec $environment $working_dir $RUNNING_CONTAINER_ID "$@"
}

function docker_exec_interactive {
    debug ${FUNCNAME[0]}
    environment=""
    if [[ ! -z $METROAE_PASSWORD ]]; then
        environment=" -e METROAE_PASSWORD=$METROAE_PASSWORD"
    fi
    if [[ ! -z $SSHPASS_PASSWORD ]]; then
        sshpass="sshpass -p$SSHPASS_PASSWORD"
    fi

    if [[ ! -z $NOT_INTERACTIVE ]]; then
        environment="$environment -e NON_INTERACTIVE=true"
        docker exec $environment $RUNNING_CONTAINER_ID $sshpass "$@"
    else
        docker exec -it $environment $RUNNING_CONTAINER_ID $sshpass "$@"
    fi
}

function interactive {
    debug ${FUNCNAME[0]}
    run_container_if_not_running
    docker_exec_interactive /bin/bash
}

function docker_status {
    debug ${FUNCNAME[0]}
    echo ""
    write_to_screen_and_script_log ">>> Getting status of the MetroAE container"
    get_running_container_id
    if [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        echo ""
        write_to_screen_and_script_log ">>> Getting the output of 'docker ps'"
        echo ""
        header=`docker ps -a | grep "IMAGE"`
        write_to_screen_and_script_log $header
        container_status=`docker ps -a | grep "$METRO_AE_IMAGE"`
        write_to_screen_and_script_log $container_status
        echo ""
        write_to_screen_and_script_log ">>> Getting the versions in the container itself"
        echo ""
        docker exec $RUNNING_CONTAINER_ID cat /source/version
    else
        echo ""
        write_to_screen_and_script_log "The MetroAE container is not running. Please run 'metroae container setup'. Quitting."
        exit 0
    fi
    echo ""
}

function check_for_user_group {
    debug ${FUNCNAME[0]}
    uid=`id -u`
    debug "${FUNCNAME[0]}: uid=$uid"
    get_host_operating_system
    if [[ $uid -eq 0 ]] || [[ $OS_RELEASE -eq $NON_LINUX ]]; then
        return 0
    fi

    set +e
    docker_group=`getent group docker`
    debug "${FUNCNAME[0]}: docker_group=$docker_group"
    set -e
    if [[ -z $docker_group ]]; then
        echo ""
        write_to_screen_and_script_log ">>> Adding docker group"
        sudo groupadd docker
        echo ""
        write_to_screen_and_script_log ">>> Restarting Docker"
        sudo systemctl restart docker
        if [[ -d $INSTALL_FOLDER ]]; then
            sudo chown -R root:docker $INSTALL_FOLDER
            sudo chmod -R 775 $INSTALL_FOLDER
        fi
    fi

    uid=`id -u`
    debug "${FUNCNAME[0]}: uid=$uid"
    get_host_operating_system

    set +e
    current_user=`whoami`
    debug "${FUNCNAME[0]}: current_user=$current_user"
    docker_part_of_groups=`id -nG $current_user | grep docker`
    debug "${FUNCNAME[0]}: docker_part_of_groups=$docker_part_of_groups"
    set -e
    if [[ -z "$docker_part_of_groups" ]]; then
        echo ""
        write_to_screen_and_script_log "It looks like the user `whoami` isn't a member of the 'docker' group. `whoami` must"
        write_to_screen_and_script_log "be a member of the 'docker' group to proceed."
        declare -l confirmation
        if [[ -z $1 ]]; then
            confirmation="init"
            while [[ $confirmation != "n" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "" ]]
            do
                echo ""
                read -p "Do you want the current user to be added to the docker group: (y/N) " confirmation
            done
        else
            confirmation=$1
        fi

        if [[ $confirmation != "y" ]]; then
            echo ""
            write_to_screen_and_script_log "Please add the current user to the docker group and retry. Quitting"
            exit 1
        fi

        echo ""
        write_to_screen_and_script_log ">>> Adding `whoami` to the docker group"
        sudo gpasswd -a `whoami` docker >> /dev/null
        if [[ -z $NOT_INTERACTIVE ]]; then
            echo ""
            write_to_screen_and_script_log "We added user `whoami` to the docker group. For this one-time change to take effect,"
            write_to_screen_and_script_log "you must logout and back in before trying again."
            exit 0
        fi
    fi

}

#################################################################################
#                                 DEPLOYMENT                                    #
#################################################################################

function list_workflows {
    debug ${FUNCNAME[0]}
    for file in $PLAYBOOK_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
    for file in $PLAYBOOK_WITH_BUILD_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
}

function check_password_needed {
    debug ${FUNCNAME[0]}
    deployment_dir="$1"

    if [[ -z $METROAE_PASSWORD ]]; then
        if [[ -a $deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE ]]; then
            fail=0
            grep $ENCRYPTED_TOKEN "$deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE" > /dev/null || fail=1
            if [[ $fail -ne 0 ]]; then
                SKIP_PASSWORD=1
            fi
        else
            SKIP_PASSWORD=1
        fi
    else
        SKIP_PASSWORD=1
    fi
}

function ask_password {
    debug ${FUNCNAME[0]}
    if [[ $SKIP_PASSWORD -ne 1 ]]; then
        write_to_screen_and_script_log "The deployment contains encrypted content which requires a password to access."
        echo "Enter the password, below, or add the environment variable METROAE_PASSWORD and retry."
        echo ""
        read -s -p "Enter password: " METROAE_PASSWORD
        export METROAE_PASSWORD
    fi
}

function write_audit_log_entry {
    debug ${FUNCNAME[0]}
    echo "`date` MetroAE $METROAE_VERSION $ORIGINAL_ARGS" >> $AUDIT_LOG
}

function audit_log_and_exit {
    debug ${FUNCNAME[0]}
    echo "`date` MetroAE $METROAE_VERSION exit code $1" >> $AUDIT_LOG
    print_version_and_exit $1
}

# We just use the old version to parse the options
function deployment_main {
    debug ${FUNCNAME[0]}
    set +e

    ORIGINAL_ARGS="$*"

    #
    # Parse arguments
    #
    SKIP_BUILD=0
    SKIP_PASSWORD=0
    POSITIONAL=()
    while [[ $# -gt 0 ]]
    do
    key="$1"

    case $key in
        -h|--help)
        main_help
        print_version_and_exit 0
        ;;
        --ansible-help)
        $(which ansible-playbook) --help
        print_version_and_exit 0
        ;;
        --list)
        list_workflows
        print_version_and_exit 0
        ;;
        --set-group)
        GROUP="$2"
        touch ansible.log
        chgrp $GROUP ansible.log
        touch $AUDIT_LOG
        chgrp $GROUP $AUDIT_LOG
        shift # past argument
        shift # past value
        ;;
        --skip-build)
        SKIP_BUILD=1
        shift # past argument
        ;;
        --skip-password)
        SKIP_PASSWORD=1
        shift # past argument
        ;;
        *)    # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift # past argument
        ;;
    esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters

    # Missing workflow, show usage
    if [[ $# -eq 0 ]] || [[ $1 == -* ]]; then
        main_help
        print_version_and_exit 1
    fi

    # <workflow> argument
    WORKFLOW=$1

    # Add .yml extension if needed
    EXTENSION="${WORKFLOW##*.}"
    if [[ "$EXTENSION" != "yml" ]]; then
        WORKFLOW=${WORKFLOW}.yml
    fi

    if [[ ! -a $PLAYBOOK_DIR/$WORKFLOW  ]] && [[ ! -a $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW ]]; then
        write_to_screen_and_script_log "Requested MetroAE workflow ($1) could not be found"
        print_version_and_exit 1
    fi
    shift

    # [deployment] argument
    if [[ $# -gt 0 ]]; then
        if [[ $1 != -* ]]; then
            DEPLOYMENT="$1"
            shift
            if [[ $DEPLOYMENT == *.csv ]]; then
                filename=$(basename -- "$DEPLOYMENT")
                deployment_name="${filename%.*}"
                DEPLOYMENT_DIR="$DEPLOYMENTS_BASE_DIR/$deployment_name"
                rm -f $DEPLOYMENT_DIR/*.yml
                ./convert_csv_to_deployment.py $DEPLOYMENT $deployment_name
            elif [[ -d $DEPLOYMENT ]]; then
                DEPLOYMENT_DIR=$DEPLOYMENT
            elif [[ -d $DEPLOYMENTS_BASE_DIR/$DEPLOYMENT ]]; then
                DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/$DEPLOYMENT
            else
            write_to_screen_and_script_log "Could not find deployment '$DEPLOYMENT' under $DEPLOYMENTS_BASE_DIR"
            print_version_and_exit 1
            fi
        fi
    fi

    # Get password if needed
    check_password_needed "$DEPLOYMENT_DIR"
    ask_password
    if [[ ! -z $METROAE_PASSWORD ]]; then
        export ANSIBLE_VAULT_PASSWORD_FILE=$VAULT_ENV_FILE
    fi

    # Run playbooks
    if [[ -a $PLAYBOOK_DIR/$WORKFLOW  ]]; then
        write_audit_log_entry
        $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
    elif [[ -a $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW ]]; then
        write_audit_log_entry
        if [[ $SKIP_BUILD -ne 1 ]]; then
            $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/build.yml "$@" || audit_log_and_exit $?
            if [[ $GROUP ]]; then chgrp -R $GROUP $INVENTORY_DIR; fi
        fi
        $(which ansible-playbook) $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
    else
        write_to_screen_and_script_log "Requested MetroAE workflow ($WORKFLOW) could not be found"
        print_version_and_exit 1
    fi

    audit_log_and_exit 0

    set -e

}

#################################################################################
#                                    Config                                     #
#################################################################################

function docker_exec_levistate {
    debug ${FUNCNAME[0]}
    docker_exec env /usr/bin/python /source/levistate/metroae_config.py "$@"
}


function config_status {
    debug ${FUNCNAME[0]}
    container_status
}

function config_main {
    debug ${FUNCNAME[0]}

    check_docker

    check_for_user_group

    if [[ $# -eq 0 ]]; then
        config_help ",config"
        exit 0
    fi

    shopt -s extglob
    POSITIONAL=()
    exec=false
    usage_last=false
    no_arguments=$#
    while [[ $# -gt 0 ]]
    do
        key=$1
        case "$key" in
            help|--h|-h|--help|-help)

            get_running_container_id
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                config_help ",config"
            else
                if [[ $no_arguments -lt 2 ]]; then
                    usage_last=true
                fi
            fi
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
            pull)
            if [[ -z $2 ]]; then
                pull
            else
                pull $2
                shift
            fi
            shift
            ;;
            setup)
            if [[ -z $2 ]]; then
                setup
            else
                setup $2
                shift
            fi
            shift
            ;;
            start)
            run_container
            shift
            ;;
            stop)
            stop_running_container
            shift
            ;;
            destroy)
            if [[ -z $2 ]]; then
                destroy
            else
                destroy $2
                shift
            fi
            shift
            ;;
            upgrade-engine)
            if [[ -z $2 ]]; then
                update_container
            else
                shift
                update_container $*
            fi
            exit 0
            ;;
            interactive)
            interactive
            shift
            ;;
            status)
            config_status
            shift
            ;;
            *)
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
        esac
    done

    if [[ $exec == true ]]; then
        docker_exec_levistate "${POSITIONAL[@]}"
    fi

    if [[ $usage_last == true ]]; then
        config_help ",config"
    fi

}

#################################################################################
#                                  Container                                    #
#################################################################################

function copy_ssh_id {
    debug ${FUNCNAME[0]}
    if [[ -z $1 ]]; then
        echo "Usage: metroae tools ssh copyid <user@hostname>"
        print_version_and_exit 1
    fi
    run_container_if_not_running

    sshpass=" "
    if [[ ! -z $SSHPASS_PASSWORD ]]; then
       sshpass="sshpass -p$SSHPASS_PASSWORD"
    fi

    if [[ ! -z $NOT_INTERACTIVE ]]; then
       docker exec $RUNNING_CONTAINER_ID $sshpass ssh-copy-id -i /source/id_rsa.pub -o StrictHostKeyChecking=no $1
    else
       docker exec -it $RUNNING_CONTAINER_ID $sshpass ssh-copy-id -i /source/id_rsa.pub -o StrictHostKeyChecking=no $1
    fi
}

function docker_metro_ae_exec {
    debug ${FUNCNAME[0]}
    docker_exec env /source/nuage-metro/metroae "$@"
}

function stop_ui {
    debug ${FUNCNAME[0]}
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh stop
}

function start_ui {
    debug ${FUNCNAME[0]}
    run_container_if_not_running

    docker_exec_interactive /source/UI.sh start $1

}

function ui_status {
    debug ${FUNCNAME[0]}
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh status
}

function load_certificates {
    debug ${FUNCNAME[0]}
    get_running_container_id

    docker_exec_interactive /source/UI.sh loadCertificates $1 $2 $3
}

function unzip_files {
    debug ${FUNCNAME[0]}
    docker_exec /source/nuage-metro/nuage-unzip.sh "$@"
}

function gen_example_from_schema {
    debug ${FUNCNAME[0]}
    docker_exec /usr/bin/python /source/nuage-metro/generate_example_from_schema.py "$@"
}

function container_status {
    debug ${FUNCNAME[0]}
    docker_status
    if [[ -f $SETUP_FILE ]]; then
        write_to_screen_and_script_log ">>> Getting container configuration from host"
        echo ""
        read_setup_files
        if [[ -z $METROAE_SETUP_TYPE ]]; then
            echo ""
            write_to_screen_and_script_log "We couldn't find the MetroAE setup type in the configuration file on disk."
            echo "Please run 'metroae container setup' and try again."
            echo ""
            exit 1
        elif [[ -z $METROAE_MOUNT_POINT ]]; then
            echo ""
            write_to_screen_and_script_log "We couldn't find the MetroAE data path in the configuration file on disk."
            echo "Please run 'metroae container setup' and try again."
            echo ""
            exit 1
        fi
        if [[ $METROAE_SETUP_TYPE == "c" ]]; then
            current_setup_type="Config"
        elif [[ $METROAE_SETUP_TYPE == "d" ]]; then
            current_setup_type="Deploy"
        elif [[ $METROAE_SETUP_TYPE == "b" ]]; then
            current_setup_type="Both Config and Deploy"
        else
            echo ""
            write_to_screen_and_script_log "The MetroAE setup type in the configuration file on disk is not valid."
            echo "Please run 'metroae container setup' and try again."
            echo ""
        fi
        write_to_screen_and_script_log "MetroAE setup type: $current_setup_type"
        write_to_screen_and_script_log "MetroAE container data path: $METROAE_MOUNT_POINT"

        if [[ ! -z "$METROAE_GUI_ENABLE" ]]; then
            get_host_operating_system
            if [[ $OS_RELEASE -eq $LINUX ]]; then
                write_to_screen_and_script_log "MetroAE container GUI port: 5001"
    	    else
                write_to_screen_and_script_log "MetroAE container GUI port: $UI_PORT"
            fi
        fi
    else
        echo ""
        write_to_screen_and_script_log "MetroAE container setup file not found. Please run 'metroae container setup'"
        echo "and try again. Quitting."
        echo ""
        exit 1
    fi
}

function vault_password {
    debug ${FUNCNAME[0]}
    run_container_if_not_running

    docker_exec_interactive /usr/bin/python /source/nuage-metro/encrypt_credentials.py  $1
}

function disable_encryption {
    debug ${FUNCNAME[0]}
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh disable-encryption
}

function container_main {
    debug ${FUNCNAME[0]}
    if [[ ! -z $GROUP_CHECK ]]; then
        debug "${FUNCNAME[0]} GROUP_CHECK is defined"
        check_for_user_group "$@"
        shift
        print_version_and_exit 0
    else
        debug "${FUNCNAME[0]} GROUP_CHECK is not defined"
        check_for_user_group "$@"
    fi

    # check docker
    check_docker

    # main functionality
    if [[ $# -ne 0 ]] && [[ $1 == "gui" ]]; then
        ui_help ",gui"
        exit 0
    elif [[ $# -eq 0 ]]; then
        container_help ",container"
        exit 0
    fi

    shopt -s extglob

    POSITIONAL=()
    exec=false
    while [ $# -gt 0 ]
    do
        key=$1
        case $key in
            help|--h|-h|--help|-help)
            container_help ",container"
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
            pull)
            if [[ -z $2 ]]; then
                pull
            else
                pull $2
                shift
            fi
            shift
            ;;
            start)
            run_container
            shift
            ;;
            setup)
            num_params=$#
            if [[ num_params -gt 1 ]]; then
                shift
                setup_container "$@"
                for (( i=1; i<$num_params; i+=1 )); do
                    shift
                done
            else
                shift
                setup_container
            fi
            ;;
            stop)
            stop_running_container
            shift
            ;;
            destroy)
            if [[ -z $2 ]]; then
                destroy
            else
                destroy $2
                shift
            fi
            shift
            ;;
            upgrade-engine)
            if [[ -z $2 ]]; then
                update_container
            else
                shift
                update_container $*
            fi
            exit 0
            ;;
            stop-ui)
            stop_ui
            shift
            ;;
            start-ui)
            if [[ -z $2 ]]; then
                start_ui
            else
                start_ui $2
                shift
            fi
            shift
            ;;
            status-ui)
            ui_status
            shift
            ;;
            status)
            container_status
            shift
            ;;
            encrypt-credentials)
            if [[ -z $2 ]]; then
                vault_password
            else
                vault_password $2
                shift
            fi
            shift
            ;;
            enable-ui-encryption)
            load_certificates $2 $3 $4
            shift
            shift
            shift
            shift
            ;;
            disable-ui-encryption)
            disable_encryption
            shift
            ;;
            interactive)
            interactive
            shift
            ;;
            unzip-files)
            shift
            unzip_files "$@"
            print_version_and_exit 0
            ;;
            generate-example-from-schema)
            shift
            gen_example_from_schema "$@"
            print_version_and_exit 0
            ;;
            copy-ssh-id)
            copy_ssh_id "$2"
            shift
            shift
            ;;
            download)
            if [[ ! -z $2 ]]; then
              get_from_s3 $2
              shift
            else
              get_from_s3
            fi
            shift
            ;;
            *)
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
        esac
    done

    if [[ $exec == true ]]; then
        docker_metro_ae_exec "${POSITIONAL[@]}"
    fi
}

#################################################################################
#                                   Plugins                                     #
#################################################################################

function copy_plugin_file_into_mount_point_if_necessary {
    debug ${FUNCNAME[0]}
    read_setup_files
    local plugin_path=${PLUGIN_INSTALL_ARGS[0]}
    mkdir -p $METROAE_MOUNT_POINT/metro_plugins
    if [[ -d $plugin_path ]]; then
        cp -r $plugin_path $METROAE_MOUNT_POINT/metro_plugins/
    elif [[ -f $plugin_path ]]; then
        cp $plugin_path $METROAE_MOUNT_POINT/metro_plugins/
    fi
    PLUGIN_INSTALL_ARGS[0]=/metroae_data/metro_plugins/${plugin_path##*/}
}

function version_compare {
    debug ${FUNCNAME[0]}
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

function get_plugin_name {
    debug ${FUNCNAME[0]}
    set +e
    local plugin_line=`grep plugin_name $1/plugin-cfg.yml`

    if [[ $? -ne 0 ]]
    then
        write_to_screen_and_script_log "Plugin missing or corrupt plugin-cfg.yml"
        print_version_and_exit 1
    fi
    plugin_name=`echo $plugin_line | awk '{ print $2 }'`
    set -e
}

function check_plugin_version {
    debug ${FUNCNAME[0]}
    set +e
    local plugin_line=`grep required_metro_version $1/plugin-cfg.yml`

    if [[ $? -ne 0 ]]
    then
        write_to_screen_and_script_log "Plugin missing or corrupt plugin-cfg.yml"
        print_version_and_exit 1
    fi

    local plugin_version=`echo $plugin_line | awk '{ print $2 }'`

    version_compare $plugin_version ${METROAE_VERSION#"v"}
    if [[ $? -eq 1 ]]
    then
        write_to_screen_and_script_log "Plugin requires MetroAE version $plugin_version"
        print_version_and_exit 1
    fi
    set -e

}

function check_plugin_files {
    debug ${FUNCNAME[0]}
    for file in $1/*
    do
        #echo $file
        if [[ -d $file ]]
        then
            check_plugin_files $file $2 $3
        elif [[ -f $file ]]
        then
            local base_file=${file#$2/}
            if [[ -f $3/$base_file ]]
            then
                write_to_screen_and_script_log "Plugin file $base_file conflicts with existing files"
                print_version_and_exit 1
            fi
        fi
    done
}

function check_single_plugin_file {
    debug ${FUNCNAME[0]}
    if [[ -f $3/$1 ]]
    then
        write_to_screen_and_script_log "Plugin file $1 conflicts with existing files"
        print_version_and_exit 1
    fi
    if [[ ! -f $2/$1 ]]
    then
        write_to_screen_and_script_log "Plugin file $1 is missing"
        print_version_and_exit 1
    fi

}

function setup_plugin {
    debug ${FUNCNAME[0]}
    write_to_script_log "Writing $1/uninstall_files"
    mkdir -p $1
    touch $1/uninstall_files
    uninstall_file=$1/uninstall_files
}

function copy_plugin_files {
    debug ${FUNCNAME[0]}
    for file in $1/*
    do
        if [[ -d $file ]]
        then
            copy_plugin_files $file $2 $3
        elif [[ -f $file ]]
        then
            local base_file=${file#$2/}
            write_to_script_log "Copying $file -> $3/$base_file"
            local dir=`dirname $3/$base_file`
            mkdir -p $dir
            cp $file $3/$base_file
            echo "UNINSTALL_FILES+=($3/$base_file)" >> $uninstall_file
        fi
    done
}

function copy_single_plugin_file {
    debug ${FUNCNAME[0]}
    write_to_script_log "Copying $2/$1 -> $3/$1"
    mkdir -p $3
    cp $2/$1 $3/$1
    echo "UNINSTALL_FILES+=($3/$1)" >> $uninstall_file
}

function delete_plugin_files {
    debug ${FUNCNAME[0]}
    if [[ ! -f $PLUGIN_DIR/$1/uninstall_files ]]
    then
        echo "Plugin $1 uninstall_files missing"
        print_version_and_exit 1
    fi
    UNINSTALL_FILES=()
    source $PLUGIN_DIR/$1/uninstall_files

    for file in ${UNINSTALL_FILES[@]}
    do
        delete_single_plugin_file $file
    done
}

function delete_single_plugin_file {
    debug ${FUNCNAME[0]}
    write_to_script_log "Deleting $1"
    if [[ -f $1 ]]
    then
        rm -f $1
        local dir=`dirname $1`
        set +e
        rmdir $dir 2> /dev/null
        set -e
    else
        write_to_script_log "Not found: $1"
    fi
}

function install_plugin {
    debug ${FUNCNAME[0]}
    if [[ $1 == *.tar.gz ]]
    then
        untar_plugin $1
        install_plugin_dir $PLUGIN_INSTALL_DIR
        write_to_screen_and_script_log "Cleaning up: $PLUGIN_INSTALL_DIR"
        rm -rf install_plugin/
    else
        install_plugin_dir $1
    fi
}

function untar_plugin {
    debug ${FUNCNAME[0]}
    if [[ ! -f $1 ]]
    then
        echo "Plugin tarball $1 was not found"
        print_version_and_exit 1
    fi
    write_to_screen_and_script_log "Unzipping: $1"
    mkdir install_plugin/
    tar xfz $1 -C install_plugin/
    for dir in install_plugin/*
    do
        if [[ -d $dir ]]
        then
            PLUGIN_INSTALL_DIR=$dir
        fi
    done
}

function install_plugin_dir {
    debug ${FUNCNAME[0]}
    if [[ ! -d $1 ]]
    then
        echo "Plugin dir $1 was not found"
        print_version_and_exit 1
    fi
    write_to_screen_and_script_log ">>> Installing plugin: $1"
    if [[ $RUN_MODE == "INSIDE" ]]; then
        /source/nuage-metro/src/validate_plugin.py $1
    else
        src/validate_plugin.py $1
    fi
    get_plugin_name $1
    write_to_screen_and_script_log "Plugin name: $plugin_name"
    check_plugin_version $1
    write_to_screen_and_script_log "Checking files..."
    check_single_plugin_file plugin-cfg.yml $1 $PLUGIN_DIR/$plugin_name
    check_single_plugin_file menu $1 $PLUGIN_DIR/$plugin_name
    check_plugin_files $1/playbooks $1/playbooks $PLAYBOOK_WITH_BUILD_DIR
    check_plugin_files $1/roles $1/roles $ROLES_DIR
    check_plugin_files $1/schemas $1/schemas $SCHEMA_DIR
    write_to_screen_and_script_log "Installing plugin files..."
    setup_plugin $PLUGIN_DIR/$plugin_name
    copy_single_plugin_file plugin-cfg.yml $1 $PLUGIN_DIR/$plugin_name
    copy_single_plugin_file menu $1 $PLUGIN_DIR/$plugin_name
    copy_plugin_files $1/playbooks $1/playbooks $PLAYBOOK_WITH_BUILD_DIR
    copy_plugin_files $1/roles $1/roles $ROLES_DIR
    copy_plugin_files $1/schemas $1/schemas $SCHEMA_DIR
    write_to_screen_and_script_log "Plugin installation complete"
}

function uninstall_plugin {
    debug ${FUNCNAME[0]}
    if [[ ! -d $PLUGIN_DIR/$1 ]]
    then
        echo "Plugin $1 was not found"
        print_version_and_exit 1
    fi
    write_to_screen_and_script_log ">>> Uninstalling plugin: $1"
    write_to_screen_and_script_log "Removing plugin files..."

    delete_plugin_files $1
    delete_single_plugin_file $PLUGIN_DIR/$1/uninstall_files
    if [[ $RUN_MODE == "INSIDE" ]] && [[ -n $1 ]]; then
        rm -rf /metroae_data/metro_plugins/$1
    fi
    write_to_screen_and_script_log "Plugin removal complete"
}

function validate_plugin {
    debug ${FUNCNAME[0]}
    if [[ $1 == *.tar.gz ]]
    then
        untar_plugin $1
        validate_plugin_dir $PLUGIN_INSTALL_DIR
        write_to_screen_and_script_log "Cleaning up: $PLUGIN_INSTALL_DIR"
        rm -rf install_plugin/
    else
        validate_plugin_dir $1
    fi
}

function validate_plugin_dir {
    debug ${FUNCNAME[0]}
    if [[ ! -d $1 ]]
    then
        echo "Plugin dir $1 was not found"
        print_version_and_exit 1
    fi
    write_to_screen_and_script_log ">>> Validating plugin: $1"
    src/validate_plugin.py $1
}

function plugin_main {
    debug ${FUNCNAME[0]}

    if [[ $RUN_MODE == "CONTAINER" ]]; then
        local action=$1
        shift
        PLUGIN_INSTALL_ARGS=("$@")
        if [[ $action == "install" ]] || [[ $action == "validate" ]]; then
            copy_plugin_file_into_mount_point_if_necessary
        fi
        docker_metro_ae_exec plugin $action "${PLUGIN_INSTALL_ARGS[@]}"
        exit 0
    fi

    POSITIONAL=()
    case $1 in
        install)
        install_plugin "$2"
        print_version_and_exit 0
        ;;
        uninstall)
        uninstall_plugin "$2"
        print_version_and_exit 0
        ;;
        validate)
        validate_plugin "$2"
        print_version_and_exit 0
        ;;
        *)
        plugin_help ",plugin"
        print_version_and_exit 1
        ;;
    esac
}

#################################################################################
#                                    Tools                                      #
#################################################################################

function tools_main {
    debug ${FUNCNAME[0]}
    local setup_args=""
    if [[ ! -z $NOT_INTERACTIVE ]]; then
        setup_args=("${EXTRA_ARGS[@]:0:6}")
        EXTRA_ARGS=("${EXTRA_ARGS[@]:6}")
    fi

    get_running_container_id
    get_container_id
    if [[ $RUN_MODE == "CONTAINER" ]] && [[ -z $RUNNING_CONTAINER_ID ]]; then
        if [[ -z $CONTAINER_ID ]]; then
            setup_container "${setup_args[@]}"
        else
            docker start $CONTAINER_ID
        fi
    fi

    POSITIONAL=()
    local command_to_run=""
    case ${MATCH_MENU[3]} in
        unzip-files)
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            docker_exec env /source/nuage-metro/nuage-unzip.sh ${EXTRA_ARGS[@]}
        else
            ./nuage-unzip.sh ${EXTRA_ARGS[@]}
        fi
        print_version_and_exit 0
        ;;
        get_debug)
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            docker_exec env /usr/bin/python /source/nuage-metro/get_debug.py ${EXTRA_ARGS[@]}
        else
            /usr/bin/python get_debug.py ${EXTRA_ARGS[@]}
        fi
        print_version_and_exit 0
        ;;
        convert_csv_to_deployment)
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            docker_exec env workdir /source/nuage-metro /usr/bin/python convert_csv_to_deployment.py ${EXTRA_ARGS[@]}
        else
            /usr/bin/python convert_csv_to_deployment.py ${EXTRA_ARGS[@]}
        fi
        print_version_and_exit 0
        ;;
        generate-example-from-schema)
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            docker_exec env /usr/bin/python /source/nuage-metro/generate_example_from_schema.py ${EXTRA_ARGS[@]}
        else
            /usr/bin/python generate_example_from_schema.py ${EXTRA_ARGS[@]}
        fi
        print_version_and_exit 0
        ;;
        encrypt-credentials)
        if [[ $RUN_MODE == "CONTAINER" ]]; then
            docker_exec env /usr/bin/python /source/nuage-metro/encrypt_credentials.py ${EXTRA_ARGS[@]}
        else
            /usr/bin/python encrypt_credentials.py ${EXTRA_ARGS[@]}
        fi
        print_version_and_exit 0
        ;;
        *)
        tools_help ",tools"
        print_version_and_exit 1
        ;;
    esac
}

#################################################################################
#                                     Help                                      #
#################################################################################

function main_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
    echo "[deployment] is the name of a deployment containing the required"
    echo "configuration files. The deployments are stored as directories under:"
    echo $DEPLOYMENTS_BASE_DIR
    echo ""
    echo "[options] include:"
    echo "  -h, --help:            Displays this help."
    echo "  --ansible-help:        Displays help for ansible arguments."
    echo "  -v, -vv, -vvv, -vvvv:  Runs with increasing levels of verbosity."
    echo "  --list:                Shows a list of all supported workflows"
    echo "  --skip-password:       Do not ask for a password.  Password can be"
    echo "                         provided via the environment variable"
    echo "                         METROAE_PASSWORD"
    echo "  --skip-build:          Runs workflow without performing build."
    echo "                         This will prevent changes in the deployment"
    echo "                         from taking effect, but it will be faster."
    echo "  --set-group <group>:   Sets the ownership of inventory and logs to"
    echo "                         the specified group so that other users in"
    echo "                         the group can access these files."
    echo ""
    echo "Any additional [options] are passed to the internal Ansible engine"
    echo "for processing"
    echo ""
    echo "Additional menu help is available by adding 'help' to the command line,"
    echo "e.g. 'metroae container help'"
    if [[ $RUN_MODE == "CONTAINER" ]]; then
        get_running_container_id
        get_container_id
        if [[ -z $RUNNING_CONTAINER_ID ]] && [[ -z $CONTAINER_ID ]]; then
            echo ""
            echo "It looks like you are trying to run the MetroAE container because"
            echo "this command was executed from a directory other than a local"
            echo "copy of the MetroAE repo. The MetroAE container was not found. To"
            echo "configure the MetroAE continer, please run 'metroae container setup'."
            echo "To run from a local copy of the MetroAE repo, change directory to"
            echo "the root of that local copy and try again. If you need to create"
            echo "a local copy of the MetroAE repo, check"
            echo "https://github.com/nuagenetworks/nuage-metro for details."
        fi
    fi
}

function container_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE container usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
}

function config_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE config is a tool that you can use to apply and manage day-zero configurations"
    echo "for a Nuage Networks VSD. MetroAE config is only available via the MetroAE container."
    echo "system inside the MetroAE container. To access metroae config help you can"
    echo "execute 'metroae config -h'. This will list the positional arguments that are"
    echo "supported by the tool. To get additional help for each positional argument,"
    echo "execute 'metroae config <positional argument> -h', e.g."
    echo "'metroae config create -h'."
    echo ""
    echo "MetroAE config usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""

    get_running_container_id
    if [[ -z $RUNNING_CONTAINER_ID ]]; then
        echo ""
        echo "The MetroAE container is not running. Full help text can only be accessed"
        echo "when the container is running. Please execute 'metroae container start'"
        echo "and try again."
    elif [[ $NUM_CLI_ARGS == 1 ]]; then
        docker_exec_levistate -h
    else
        # Remove the string "config"
        docker_exec_levistate "${CLI_ARGS[@]:1}"
    fi
}

function tools_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE tools usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
}

function plugin_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE plugin usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
}

function ui_help {
    debug ${FUNCNAME[0]}
    echo "Nuage Networks Metro Automation Engine (MetroAE) Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE gui usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
}

#################################################################################
#                                     Menu                                      #
#################################################################################

function switch_help {
    debug ${FUNCNAME[0]}
    case $1 in
        ,config*)
        config_help "$1"
        exit 0
        ;;
        ,container*)
        container_help "$1"
        exit 0
        ;;
        ,tools*)
        tools_help "$1"
        exit 0
        ;;
        ,plugin*)
        plugin_help "$1"
        exit 0
        ;;
        ,gui*)
        ui_help "$1"
        exit 0
        ;;
        *)
        main_help "$1"
        exit 0
        ;;
    esac
}

function get_sub_menu {
    debug ${FUNCNAME[0]}
    SUB_MENU=""
    for (( i=0; i<=${#MENU[@]}; i+=$MENU_STRIDE )); do
        if [[ ${MENU[@]:$i:1} == $1 ]]; then
            SUB_MENU=("${MENU[@]:$i:$MENU_STRIDE}")
        fi
    done
}

function print_menu_help {
    debug ${FUNCNAME[0]}
    for (( i=0; i<=${#MENU[@]} - 1; i+=$MENU_STRIDE )); do
        local menu_key=${MENU[@]:$i:1}
        local text_key=${MENU[@]:$i+1:1}
        local menu_family_key=${MENU[@]:$i+2:1}
        local operation_key=${MENU[@]:$i+3:1}
        local help_key=${MENU[@]:$i+4:1}
        if [[ "${menu_key}" == "$2"* ]] ;then
            if [[ $menu_family_key == "playbook" ]]; then
                printf "${1}" "${menu_key//,/ } [deployment] [options]" "${MENU[@]:($i + 1):1}"
            else
                printf "${1}" "${menu_key//,/ }" "${MENU[@]:($i + 1):1}"
            fi
        fi
    done
}

function parse_menu_args {
    debug ${FUNCNAME[0]}
    MENU_KEY=""
    MATCH_MENU=""
    EXTRA_ARGS=()
    while [[ $# -gt 0 ]]; do
        if [[ $1 == "help" ]] || [[ $1 == "?" ]] || [[ $1 == "-h" ]] || [[ $1 == "--h" ]] || [[ $1 == "-help" ]] || [[ $1 == "--help" ]]; then
            MATCH_MENU=(",help" "help" "help" "")
            switch_help $MENU_KEY
            exit 0
        else
            MENU_KEY=$MENU_KEY","$1
            get_sub_menu $MENU_KEY
            if [[ -z $SUB_MENU ]]; then
                EXTRA_ARGS+=("$1")
            else
                # if we match with different menu, we just clear the extra args
                if [[ "${MATCH_MENU[@]}" != "('${SUB_MENU[@]}')" ]]; then
                    EXTRA_ARGS=()
                fi
                MATCH_MENU=("${SUB_MENU[@]}")
            fi
        fi
        shift
    done
}

#################################################################################
#                                     Main                                      #
#################################################################################

if [[ -z $RUN_MODE ]]; then
    check_run_mode
fi

debug "RUN_MODE: $RUN_MODE"

try_get_menu

if [[ $# == 0 ]]; then
    main_help
    exit 0
fi

CLI_ARGS=("$@")
NUM_CLI_ARGS=$#

parse_menu_args "$@"

# Do the file check and setup before running the commands
if [[ ${MATCH_MENU[0]} != ",container,setup" ]] && [[ ${MATCH_MENU[0]} != ",container,pull" ]] && [[ ${MATCH_MENU[0]} != ",container,destroy" ]] && [[ ${MATCH_MENU[0]} != ",container,status" ]] && [[ ${MATCH_MENU[0]} != ",container,update" ]]; then
    check_for_prerequisite "$@"
    # parse it again if we loaded the new menu
    parse_menu_args "$@"
fi

case ${MATCH_MENU[2]} in
    tools)
    tools_main
    print_version_and_exit 0
    ;;
    plugin)
    plugin_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    print_version_and_exit 0
    ;;
    config)
    config_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    exit 0
    ;;
    playbook)
    if [[ $RUN_MODE == "CONTAINER" ]]; then
        container_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    else
        deployment_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    fi
    print_version_and_exit 0
    ;;
    wizard)
    if [[ $RUN_MODE == "CONTAINER" ]]; then
        docker_exec_interactive /usr/bin/python /source/nuage-metro/run_wizard.py "${EXTRA_ARGS[@]}"
    else
        ./run_wizard.py "${EXTRA_ARGS[@]}"
    fi
    print_version_and_exit 0
    ;;
    setup)
    if [[ $RUN_MODE == "CONTAINER" ]]; then
        echo "Setup cannot be run in MetroAE container"
        print_version_and_exit 1
    else
        ./setup.sh "${EXTRA_ARGS[@]}"
    fi
    print_version_and_exit 0
    ;;
    container)
    container_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    print_version_and_exit 0
    ;;
    *)
    if [[ $RUN_MODE == "CONTAINER" ]]; then
        container_main "$@"
    else
        deployment_main "$@"
    fi
    print_version_and_exit 0
    ;;
esac
